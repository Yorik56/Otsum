<script>
    {# //---*   GAME MANAGMENT   *---// #}
    // Variables de la grille de jeu
    let idGame = {{ idGame }};
    let difficulty = {{ difficulty }};
    let currentLineNumber = 0;
    const firstLetter = "{{ firstLetter }}";
    let numberOfLines = 6;
    let cellNumber = 1;


    {# //---* JOININGPRIVATEGAME *---// #}
    $.ajax({
        method: "POST",
        url: "{{ path('joiningPrivateGame') }}",
        data: {
            idGame: {{ idGame }},
            idPlayer: {{ app.user.id }}
        }
    });

    {# //---* CHECKPRESENCEOFALLPLAYERS *---// #}
    $.ajax({
        method: "POST",
        url: "{{ path('checkPresenceOfAllPlayers') }}",
        data: {
            idGame: {{ idGame }}
        }
    })
    .done(function (data) {
        if(data.actualTeam){
            $('.multiPrivateGame .' + data.actualTeam).addClass('currentTeam');
        }
        if(data.actualPlayer === {{ app.user.id }}){
            // Création du clavier
            $('#div_keyboard #keyboard').jkeyboard({
                input: $('#search_field'),
                layout: 'azerty',
            });
        }
        if(data.status === "gameJustStarted"){
            // Retrieve chrono
            {% if chronoType == true  %}
                $.ajax({
                    method: "POST",
                    url: "{{ path('startChrono') }}",
                    data: {
                        idGame: {{ idGame }}
                    }
                })
            {% endif %}
        } else if(data.status === "gameAlreadyStarted"){
            // Start chrono
            displayActualGrid()
            {% if chronoType == true  %}
                $.ajax({
                    method: "POST",
                    url: "{{ path('retrieveChrono') }}",
                    data: {
                        idGame: {{ idGame }},
                        idUser: {{ app.user.id }}
                    }
                })
            {% endif %}
        }
    });

    {# //---*   EVENTS   *---// #}
    let numberOfKeysPressed = 0;
    // User keyboard events
    $('body').on("keydown", function(e){
        numberOfKeysPressed++;
        if(numberOfKeysPressed < 2 || e.key.toLowerCase() === "backspace"){
            if(e.key.toLowerCase() === "backspace"){
                $(".backspace").trigger("click");
            } else if (e.key.toLowerCase() === "enter"){
                sendActualLine();
            } else {
                $('#keyboard .jkey').each(function (index, element) {
                    if($(element).text() === e.key.toLowerCase()){
                        $(element).trigger("click");
                    }
                })
            }
        }
    });
    $('body').on("keyup", function(e){
        $('.current_cell').removeClass("notReady");
        numberOfKeysPressed = 0;
    });

    // Validation de l'essai / MAJ de la ligne
    $('.return').on("click", function () {
        sendActualLine();
    });

    {# //---*   FUNCTIONS DECLARATIONS   *---// #}
    const displayActualGrid = function () {
        $.ajax({
            method: "POST",
            url: "{{ path('displayActualGrid') }}",
            data: {
                idGame: {{ idGame }}
            }
        })
        .done(function (data) {
            let box = $('.table').first();
            let box_line;
            box.empty();
            $.each(data.arrayGrid, function(indexLine, valueLine) {
                box.append('<tr></tr>')
                box_line = $('div tr:last-child');
                $.each(valueLine,function (indexCell, objectCell) {
                    // Grid construction
                    if (indexLine === data.numberOfRoundPlayed && indexCell === 0) {
                        box_line.append('<td data-current_line="' + indexLine + '" class="td line_' + indexLine + ' first_cell valide_cell cell cell_' + indexCell + '"><div>' + data.arrayGrid[0][0].value + '</div></td>')
                    } else {
                        if (indexLine === data.numberOfRoundPlayed && indexCell === 1) {
                            box_line.append('<td class="td line_' + indexLine + ' current_cell cell cell_' + indexCell + '"><div>_</div></td>')
                        } else if (
                            (indexLine === data.numberOfRoundPlayed) && indexCell === (valueLine.length - 1)
                        ){
                            box_line.append('<td class="td line_' + indexLine + ' cell cell_' + indexCell + ' last_cell" ><div>' + objectCell.value + '</div></td>')
                        } else if (
                            indexCell <= valueLine.length && (indexLine <= data.numberOfRoundPlayed)
                        ) {
                            box_line.append('<td class="td line_' + indexLine + ' cell cell_' + indexCell + '"><div>' + objectCell.value + '</div></td>')
                        } else {
                            box_line.append('<td class="td line_' + indexLine + ' cell cell_' + indexCell + '"><div></div></td>')
                        }
                    }
                    // Cell status
                    let cellule = $('.line_' + indexLine + ".cell_" + indexCell).first();
                    if (objectCell.placement === 1 && objectCell.presence === 1) {
                        if (!cellule.hasClass("valide_cell")) {
                            cellule.addClass("valide_cell");
                        }
                    } else if (objectCell.presence === 1) {
                        if (!cellule.hasClass("is_in_cell")) {
                            cellule.html("<div><p>" + objectCell.value + "</p></div>");
                            cellule.addClass("is_in_cell")
                        }
                    }
                    //-- Mise à jour du clavier
                    // parcours des lettres du clavier
                    $('.jkey.letter').each(function (index, element) {
                        let letter = element.childNodes[0].data;
                        let array_maj_keyboard = Object.entries(data.arrayMajKeyboard);
                        // parcours des lettres mises à jour
                        array_maj_keyboard.forEach(([key, value]) => {
                            if (letter === key) {
                                //Raz des classes
                                element.classList.remove('placee')
                                element.classList.remove('presente')
                                element.classList.remove('absente')
                                if (value.presence) {
                                    if (value.placement) {
                                        // position trouvée
                                        element.classList.add('placee')
                                    } else {
                                        // position non trouvée
                                        element.classList.add('presente')
                                    }
                                } else {
                                    // lettre absente
                                    element.classList.add('absente')
                                }
                            }
                        })
                    })
                })
            })
        });
    }

    // Affichage de la partie
    const simplyCountDownStart = function (data, currentPlayer) {
        $('#countdownExample').empty();
        simplyCountdown('#countdownExample', {
            year: data.year, // required
            month: data.month, // required
            day: data.day, // required
            hours: data.hours, // Default is 0 [0-23] integer
            minutes: data.minutes, // Default is 0 [0-59] integer
            seconds: data.seconds, // Default is 0 [0-59] integer
            words: { //words displayed into the countdown
                minutes: { singular: 'minute', plural: 'minutes' },
                seconds: { singular: 'second', plural: 'seconds' }
            },
            plural: true, //use plurals
            inline: false, //set to true to get an inline basic countdown like : 24 days, 4 hours, 2 minutes, 5 seconds
            inlineClass: 'simply-countdown-inline', //inline css span class in case of inline = true
            // in case of inline set to false
            enableUtc: false,
            refresh: 1000, //default refresh every 1s
            sectionClass: 'simply-section', //section css class
            amountClass: 'simply-amount', // amount css class
            wordClass: 'simply-word', // word css class
            zeroPad: false,
            countUp: false, // enable count up if set to true
            onEnd: function () {

                if(currentPlayer === {{ app.user.id }}){
                    $.ajax({
                        method: "POST",
                        url: "{{ path('endOfCountDown') }}",
                        data: {
                            idGame: {{ idGame }}
                        }
                    });
                }
            }
        });
    }

    // Affichage de la partie
    const creationDeLaGrille = function (mot, difficulty) {
        let box = $('.table');
        let box_line;
        $('.wordToFind').append(mot);
        for (let i = 0; i < numberOfLines; i++) {
            box.append('<tr></tr>')
            box_line = $('div tr:last-child');
            for (let j = 0; j < difficulty; j++) {
                if (i < 1 && j < 1) {
                    box_line.append('<td data-current_line="' + i + '" class="td line_' + i + ' first_cell valide_cell cell cell_' + cellNumber + '"><div>' + mot.split('')[j] + '</div></td>')
                } else {
                    if (i < 1 && j === 1) {
                        box_line.append('<td class="td line_' + i + ' current_cell cell cell_' + cellNumber + '"><div>_</div></td>')
                    } else if (i < 1 && j === (difficulty - 1)) {
                        box_line.append('<td class="td line_' + i + ' cell cell_' + cellNumber + ' last_cell" ><div>.</div></td>')
                    } else if (i < 1 && j <= difficulty) {
                        box_line.append('<td class="td line_' + i + ' cell cell_' + cellNumber + '"><div>.</div></td>')
                    } else {
                        box_line.append('<td class="td line_' + i + ' cell cell_' + cellNumber + '"><div></div></td>')
                    }
                }
                cellNumber++;
            }
        }
    }

    // Affichage de la partie
    const sendActualLine = function () {
        let mot_valide = true;
        let mot = "";
        let currentLineNumber = $('[data-current_line]').data('current_line');
        console.log("currentLineNumber -> " + currentLineNumber);
        $(".line_" + currentLineNumber).each(function (index) {
            mot += $(this).text();
            if ($(this).text() === "." || $(this).text() === "_") {
                mot_valide = false;
                return false;
            }
            if (index === $(".line_" + currentLineNumber).length - 1) {
                return false;
            }
        });
        if (!mot_valide) {
            alert('mot trop court !');
        } else {
            $('.last_cell').toggleClass('last_cell');
            $.ajax({
                method: "POST",
                url: "{{ path('updateLineMultiplayer') }}",
                data: {
                    currentLineNumber : currentLineNumber,
                    currentUser       : {{ app.user.id }},
                    mot: mot,
                    idGame: {{ idGame }}
                }
            });
        }
    }
</script>
